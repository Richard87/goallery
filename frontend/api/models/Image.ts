/* tslint:disable */
/* eslint-disable */
/**
 * Goallery
 * This is the API Specification for Goallery.
 *
 * The version of the OpenAPI document: 1.23.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ImageFeature } from './ImageFeature';
import {
    ImageFeatureFromJSON,
    ImageFeatureFromJSONTyped,
    ImageFeatureToJSON,
} from './ImageFeature';

/**
 * 
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    src: string;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    filename: string;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    description: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Image
     */
    tags: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof Image
     */
    created: Date;
    /**
     * 
     * @type {Date}
     * @memberof Image
     */
    updated: Date;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    mime: string;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    size: number;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    width: number;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    height: number;
    /**
     * 
     * @type {ImageFeature}
     * @memberof Image
     */
    features: ImageFeature;
}

/**
 * Check if a given object implements the Image interface.
 */
export function instanceOfImage(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "src" in value;
    isInstance = isInstance && "filename" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "tags" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "updated" in value;
    isInstance = isInstance && "mime" in value;
    isInstance = isInstance && "size" in value;
    isInstance = isInstance && "width" in value;
    isInstance = isInstance && "height" in value;
    isInstance = isInstance && "features" in value;

    return isInstance;
}

export function ImageFromJSON(json: any): Image {
    return ImageFromJSONTyped(json, false);
}

export function ImageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Image {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'src': json['src'],
        'filename': json['filename'],
        'description': json['description'],
        'tags': json['tags'],
        'created': (new Date(json['created'])),
        'updated': (new Date(json['updated'])),
        'mime': json['mime'],
        'size': json['size'],
        'width': json['width'],
        'height': json['height'],
        'features': ImageFeatureFromJSON(json['features']),
    };
}

export function ImageToJSON(value?: Image | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'src': value.src,
        'filename': value.filename,
        'description': value.description,
        'tags': value.tags,
        'created': (value.created.toISOString()),
        'updated': (value.updated.toISOString()),
        'mime': value.mime,
        'size': value.size,
        'width': value.width,
        'height': value.height,
        'features': ImageFeatureToJSON(value.features),
    };
}

