// Code generated by go-swagger; DO NOT EDIT.

package images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DownloadImageByIDHandlerFunc turns a function with the right signature into a download image by Id handler
type DownloadImageByIDHandlerFunc func(DownloadImageByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DownloadImageByIDHandlerFunc) Handle(params DownloadImageByIDParams) middleware.Responder {
	return fn(params)
}

// DownloadImageByIDHandler interface for that can handle valid download image by Id params
type DownloadImageByIDHandler interface {
	Handle(DownloadImageByIDParams) middleware.Responder
}

// NewDownloadImageByID creates a new http.Handler for the download image by Id operation
func NewDownloadImageByID(ctx *middleware.Context, handler DownloadImageByIDHandler) *DownloadImageByID {
	return &DownloadImageByID{Context: ctx, Handler: handler}
}

/*
	DownloadImageByID swagger:route GET /images/{id}/download images downloadImageById

# Download image by id

Download image by id
*/
type DownloadImageByID struct {
	Context *middleware.Context
	Handler DownloadImageByIDHandler
}

func (o *DownloadImageByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDownloadImageByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
