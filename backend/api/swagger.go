// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWTXPbNhD9K5xtb6VEf2R64C1uphk1h2Yaz/Tg0QEiViRcEkAWSzuMR/+9Q4A0RZGK",
	"HDedxDcKWDzsvrf7oAfITGWNRs0O0gdwWYGV8J+vay7+wo81Om5/WjIWiRX6TSucuzck229uLEIKjknp",
	"HHYx1A5JiwpnNncxEH6sFaGE9GaA2Tu0jvtDZnOLGbeIIRdnjXY4TYbNP6hPXxbC5uBXlchncDNCwehr",
	"3BqqBEMKUjAuWFUI8bRwiS4jZVkZPUvMFgXXFMB/JtxCCj8lgwBJx37i8/k9BPtzqsQjhMZQoMoLHiWp",
	"NP/6akhQacYcqQ1W84pV6gi4U5/xidCOslkIFrkvWDFWbj4iLAgi0fj+sfLreL9XkosnpXnQEr3CY+n2",
	"hNrj/pFpz2LHWcdQqL6rdSigz+xoz/UaT+errHOll5uyJmpU357T/p7AviezKbF6gyxU6abA0m/Ma82C",
	"a3dI4+XFrNqsuHzCgHeYffyUiPZezGpS3Hxouz9kuUFBSL5rNKRQoJBIEEMYAm8HhtRn0cnVN5BV77CB",
	"XQuq9NaEevdGEq4L5SLlIi4wev1+FX2wmKmtyjxQtDUUvTWiLJGa5WPOKfRrEMMdkgtQ58uLy+VZS4Wx",
	"qIVVkMLl8mx5DjFYwYWvIxE1F0lpcuUNwZrgpeOk3iJHf/x9HQV/8njkE1rJsHvdbVBw4ysjG29PRjNq",
	"DyisLbsqklsX3CeYySmr2Xd5T9w4t98IJWpWonSwryxTjV7q4Mm+2Iuzs2+cVmf4M3n9+a5l/tU3vPFg",
	"cGbuvBIyGqga+hbSm3UMrq4qQc2MnsEAb6DthXYCPi0yIzFHvegEXWyMbBZdb7ffHj7xY++ZzfFI24iy",
	"jLqwmb5Z9Tv/SaZH3z75Yk29/AcVbiTViMNeq25hvSdE8qDk7otq+Lho00T+fZiX46pZSe8QJCpkpPa2",
	"QywfGEC8/bV2MpifXx9PYrxH1aEfr//HKe1Ufwkqj7U5JXMizb0ujZBH9X7TBXxR9D7oR1Xe557kajvW",
	"4fH53ygt/LM3feTD0VuL+XPPWv3so+4u/+VTVT73+D1u7NeefVEv0JHmnHb9GGP433WzbrvHId31fVpT",
	"CSkkwqrk7hx2/hmzIeGFHP5sfhci/g0AAP//dPv2c8UOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
