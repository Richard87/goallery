//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerScopes = "bearer.Scopes"
)

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	Test  []string `json:"test"`
	Token string   `json:"token"`
}

// Image defines model for Image.
type Image struct {
	Created     time.Time    `json:"created"`
	Description string       `json:"description"`
	Features    ImageFeature `json:"features"`
	Filename    string       `json:"filename"`
	Height      int64        `json:"height"`
	Id          string       `json:"id"`
	Mime        string       `json:"mime"`
	Size        int64        `json:"size"`
	Src         string       `json:"src"`
	Tags        []string     `json:"tags"`
	Updated     time.Time    `json:"updated"`
	Width       int64        `json:"width"`
}

// ImageFeature defines model for ImageFeature.
type ImageFeature struct {
	PluginBlurryimage *string `json:"plugin.blurryimage,omitempty"`
}

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	Detail *string `json:"detail,omitempty"`
	Status int32   `json:"status"`
	Title  string  `json:"title"`
}

// GetTokenJSONRequestBody defines body for GetToken for application/json ContentType.
type GetTokenJSONRequestBody = AuthRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get JWT token
	// (POST /auth/login)
	GetToken(w http.ResponseWriter, r *http.Request)
	// Get all images
	// (GET /images)
	GetImages(w http.ResponseWriter, r *http.Request)
	// Get image by id
	// (GET /images/{id})
	GetImageById(w http.ResponseWriter, r *http.Request, id string)
	// Download image by id
	// (GET /images/{id}/download)
	DownloadImageById(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetToken operation middleware
func (siw *ServerInterfaceWrapper) GetToken(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetImages operation middleware
func (siw *ServerInterfaceWrapper) GetImages(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetImages(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetImageById operation middleware
func (siw *ServerInterfaceWrapper) GetImageById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetImageById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DownloadImageById operation middleware
func (siw *ServerInterfaceWrapper) DownloadImageById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DownloadImageById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/auth/login", wrapper.GetToken)
	m.HandleFunc("GET "+options.BaseURL+"/images", wrapper.GetImages)
	m.HandleFunc("GET "+options.BaseURL+"/images/{id}", wrapper.GetImageById)
	m.HandleFunc("GET "+options.BaseURL+"/images/{id}/download", wrapper.DownloadImageById)

	return m
}

type GetTokenRequestObject struct {
	Body *GetTokenJSONRequestBody
}

type GetTokenResponseObject interface {
	VisitGetTokenResponse(w http.ResponseWriter) error
}

type GetToken200JSONResponse AuthResponse

func (response GetToken200JSONResponse) VisitGetTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetToken400JSONResponse ProblemDetails

func (response GetToken400JSONResponse) VisitGetTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetImagesRequestObject struct {
}

type GetImagesResponseObject interface {
	VisitGetImagesResponse(w http.ResponseWriter) error
}

type GetImages200JSONResponse []Image

func (response GetImages200JSONResponse) VisitGetImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetImages400JSONResponse ProblemDetails

func (response GetImages400JSONResponse) VisitGetImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetImageByIdRequestObject struct {
	Id string `json:"id"`
}

type GetImageByIdResponseObject interface {
	VisitGetImageByIdResponse(w http.ResponseWriter) error
}

type GetImageById200JSONResponse Image

func (response GetImageById200JSONResponse) VisitGetImageByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetImageById400JSONResponse ProblemDetails

func (response GetImageById400JSONResponse) VisitGetImageByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DownloadImageByIdRequestObject struct {
	Id string `json:"id"`
}

type DownloadImageByIdResponseObject interface {
	VisitDownloadImageByIdResponse(w http.ResponseWriter) error
}

type DownloadImageById200ImagegifResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response DownloadImageById200ImagegifResponse) VisitDownloadImageByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/gif")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type DownloadImageById200ImagejpegResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response DownloadImageById200ImagejpegResponse) VisitDownloadImageByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/jpeg")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type DownloadImageById200ImagepngResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response DownloadImageById200ImagepngResponse) VisitDownloadImageByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/png")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type DownloadImageById200ImagesvgXmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response DownloadImageById200ImagesvgXmlResponse) VisitDownloadImageByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/svg+xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type DownloadImageById200ImagewebpResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response DownloadImageById200ImagewebpResponse) VisitDownloadImageByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/webp")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type DownloadImageById400JSONResponse ProblemDetails

func (response DownloadImageById400JSONResponse) VisitDownloadImageByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get JWT token
	// (POST /auth/login)
	GetToken(ctx context.Context, request GetTokenRequestObject) (GetTokenResponseObject, error)
	// Get all images
	// (GET /images)
	GetImages(ctx context.Context, request GetImagesRequestObject) (GetImagesResponseObject, error)
	// Get image by id
	// (GET /images/{id})
	GetImageById(ctx context.Context, request GetImageByIdRequestObject) (GetImageByIdResponseObject, error)
	// Download image by id
	// (GET /images/{id}/download)
	DownloadImageById(ctx context.Context, request DownloadImageByIdRequestObject) (DownloadImageByIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetToken operation middleware
func (sh *strictHandler) GetToken(w http.ResponseWriter, r *http.Request) {
	var request GetTokenRequestObject

	var body GetTokenJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetToken(ctx, request.(GetTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetToken")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTokenResponseObject); ok {
		if err := validResponse.VisitGetTokenResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetImages operation middleware
func (sh *strictHandler) GetImages(w http.ResponseWriter, r *http.Request) {
	var request GetImagesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetImages(ctx, request.(GetImagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetImages")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetImagesResponseObject); ok {
		if err := validResponse.VisitGetImagesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetImageById operation middleware
func (sh *strictHandler) GetImageById(w http.ResponseWriter, r *http.Request, id string) {
	var request GetImageByIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetImageById(ctx, request.(GetImageByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetImageById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetImageByIdResponseObject); ok {
		if err := validResponse.VisitGetImageByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DownloadImageById operation middleware
func (sh *strictHandler) DownloadImageById(w http.ResponseWriter, r *http.Request, id string) {
	var request DownloadImageByIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DownloadImageById(ctx, request.(DownloadImageByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DownloadImageById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DownloadImageByIdResponseObject); ok {
		if err := validResponse.VisitDownloadImageByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWTXPbNhD9K5xtb6VEf2R64C1uphk1h2Yaz/Tg0QEiVuS6JIAsQDuMR/+9Q4A0RZGK",
	"bDedJDcKWCwe3tt9qwfIdGW0QuUspA9gswIr4T9f1674Cz/WaF3707A2yI7Qbxph7b1m2X67xiCkYB2T",
	"ymEXQ22RlahwZnMXA+PHmhglpDdDmr1D67g/pDe3mLk2Y8BijVYWp2BcB5EcVnYWUbcgmEXjf+t/UJ2G",
	"F8LicMEcrlUl8hlAGaNw6MnZaq6EgxSkcLhwVCHEU3wSbcZkHGk1i3+LwtUckv/MuIUUfkoG5ZJOtsTj",
	"+T0E+3NU4hElYiiQ8sKNQJJyv74aAJJymCO3wTQvdUVHklv6jE9MbTmbF03k9nmy1kY+j/d7kq54EsyD",
	"yugVHku3J9Qe949MexY7zjqGwuu7tw4P6JEdrble42ljlnVOarkpa+aG+vKclvkk7XvWmxKrN+gElXaa",
	"WPqNea2dcLU9pPHyYlZtR658gjN0Ofv4KRHtvZjVTK750FZ/QLlBwci+ahSkUKCQyBBDaALvI5rps+jk",
	"6gvI0DtsYNcmJbXV4b17LQnXBdmIbOQKjF6/X0UfDGa0pcwniraao7dalCVys3zEnEK/BjHcIduQ6nx5",
	"cbk8a6nQBpUwBClcLs+W5xCDEa7w70hE7Yqk1Dl5QzA6ONwY1Ft00R9/X0e9TbVyeUArGXavuw0ONn6l",
	"ZePtSSuHyicUxpTdK5JbG9wnmMkpq9kfD564MbbfGCUqR6K0sK+s4xq91MHM/WMvzs6+MqxuUszg+vNd",
	"y/yrr3jjQePM3HklZDRQNdQtpDfrGGxdVYKbGT2DAd5AWwttB3xaZFpijmrRCbrYaNksutpuv336xLe9",
	"ZzbHI2UjyjLqwmbqZtXv/CeZHn375MSaevl3KtxIqhGHvVbdwnpPiOSB5O6Lavi4aNNEfj7My3HVrKR3",
	"CBYVOuT2tsNcPjAk8fbX2slgfn593InxHlWHfrz+H7u0U/1HUHmszSmZE6nvVamFPKr3my7gi6L3Qd+r",
	"8h57ktN2rMPj+N+QEn7sTYd8OHprMH/pWaNefNTe5b98qsqXHr/HjXnu2R9qAh0pzmnVj3MM/7tu1m31",
	"WOS7vk5rLiGFRBhK7s5h58eYCYAXcviz+U2I+DcAAP//DXcvl/4OAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
