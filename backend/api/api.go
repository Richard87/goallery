// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get JWT token
	// (POST /auth/login)
	GetToken(c *gin.Context)
	// Get all images
	// (GET /images)
	GetImages(c *gin.Context)
	// Get image by id
	// (GET /images/{id})
	GetImageById(c *gin.Context, id string)
	// Download image by id
	// (GET /images/{id}/download)
	DownloadImageById(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetToken operation middleware
func (siw *ServerInterfaceWrapper) GetToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetToken(c)
}

// GetImages operation middleware
func (siw *ServerInterfaceWrapper) GetImages(c *gin.Context) {

	c.Set(BearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetImages(c)
}

// GetImageById operation middleware
func (siw *ServerInterfaceWrapper) GetImageById(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetImageById(c, id)
}

// DownloadImageById operation middleware
func (siw *ServerInterfaceWrapper) DownloadImageById(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DownloadImageById(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/login", wrapper.GetToken)
	router.GET(options.BaseURL+"/images", wrapper.GetImages)
	router.GET(options.BaseURL+"/images/:id", wrapper.GetImageById)
	router.GET(options.BaseURL+"/images/:id/download", wrapper.DownloadImageById)
}

type GetTokenRequestObject struct {
	Body *GetTokenJSONRequestBody
}

type GetTokenResponseObject interface {
	VisitGetTokenResponse(w http.ResponseWriter) error
}

type GetToken200JSONResponse AuthResponse

func (response GetToken200JSONResponse) VisitGetTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetToken400JSONResponse ProblemDetails

func (response GetToken400JSONResponse) VisitGetTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetImagesRequestObject struct {
}

type GetImagesResponseObject interface {
	VisitGetImagesResponse(w http.ResponseWriter) error
}

type GetImages200JSONResponse []Image

func (response GetImages200JSONResponse) VisitGetImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetImages500JSONResponse ProblemDetails

func (response GetImages500JSONResponse) VisitGetImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetImageByIdRequestObject struct {
	Id string `json:"id"`
}

type GetImageByIdResponseObject interface {
	VisitGetImageByIdResponse(w http.ResponseWriter) error
}

type GetImageById200JSONResponse Image

func (response GetImageById200JSONResponse) VisitGetImageByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DownloadImageByIdRequestObject struct {
	Id string `json:"id"`
}

type DownloadImageByIdResponseObject interface {
	VisitDownloadImageByIdResponse(w http.ResponseWriter) error
}

type DownloadImageById200ImagegifResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response DownloadImageById200ImagegifResponse) VisitDownloadImageByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/gif")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type DownloadImageById200ImagejpegResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response DownloadImageById200ImagejpegResponse) VisitDownloadImageByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/jpeg")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type DownloadImageById200ImagepngResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response DownloadImageById200ImagepngResponse) VisitDownloadImageByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/png")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type DownloadImageById200ImagesvgXmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response DownloadImageById200ImagesvgXmlResponse) VisitDownloadImageByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/svg+xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type DownloadImageById200ImagewebpResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response DownloadImageById200ImagewebpResponse) VisitDownloadImageByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/webp")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get JWT token
	// (POST /auth/login)
	GetToken(ctx context.Context, request GetTokenRequestObject) (GetTokenResponseObject, error)
	// Get all images
	// (GET /images)
	GetImages(ctx context.Context, request GetImagesRequestObject) (GetImagesResponseObject, error)
	// Get image by id
	// (GET /images/{id})
	GetImageById(ctx context.Context, request GetImageByIdRequestObject) (GetImageByIdResponseObject, error)
	// Download image by id
	// (GET /images/{id}/download)
	DownloadImageById(ctx context.Context, request DownloadImageByIdRequestObject) (DownloadImageByIdResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetToken operation middleware
func (sh *strictHandler) GetToken(ctx *gin.Context) {
	var request GetTokenRequestObject

	var body GetTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetToken(ctx, request.(GetTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTokenResponseObject); ok {
		if err := validResponse.VisitGetTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetImages operation middleware
func (sh *strictHandler) GetImages(ctx *gin.Context) {
	var request GetImagesRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetImages(ctx, request.(GetImagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetImages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetImagesResponseObject); ok {
		if err := validResponse.VisitGetImagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetImageById operation middleware
func (sh *strictHandler) GetImageById(ctx *gin.Context, id string) {
	var request GetImageByIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetImageById(ctx, request.(GetImageByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetImageById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetImageByIdResponseObject); ok {
		if err := validResponse.VisitGetImageByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DownloadImageById operation middleware
func (sh *strictHandler) DownloadImageById(ctx *gin.Context, id string) {
	var request DownloadImageByIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DownloadImageById(ctx, request.(DownloadImageByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DownloadImageById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DownloadImageByIdResponseObject); ok {
		if err := validResponse.VisitDownloadImageByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
